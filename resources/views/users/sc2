<?php

class ShowsController extends BaseController {
	public function __construct() {
		parent::__construct();
		$this->beforeFilter('csrf', array('on'=>'post'));
		$this->beforeFilter('admin');
	}

	function build_generic_select_box_string($passed_volunteers) {
		echo ("</br> build_generic_select_box_string</br>");
		$all_volunteers = array();
		$generic_check_box =
		"<SELECT NAME='select_name[]' id='select_id[]'>" ;
		foreach($passed_volunteers as $volunteer) {
			$generic_check_box .=
			"<OPTION value=" . $volunteer["id"] . "> " . " ". $volunteer["fullname"] . " </OPTION>";
		}
		$generic_check_box .= "</SELECT>";
		//echo '<br>'.$generic_check_box.  '<br>';
		return $generic_check_box;
		
		//exit("exit at 13");
	}	
	
	
	function customize_check_box_string($select_box_model,$show,$rowcount) {
		echo("customize_check_box_string1");//exit("exit customize_check_box_string");
		$from_str_name = "select_name[]";
		$assigned_status = false;
		$from_str_id = "select_id[]";
		// ******************
		// for every task record defined for the show
		// we build a unique html select box for the volunteers
		// they are unique so we can set the "selected" property
		// when the maillist_index in the (new_)show record matches
		//*******************
		//exit ("<br>exit select model".$select_box_model."<br>");
		//var_dump( $select_box_model);
		$to_str_name = $from_str_name ;
		$to_str_id = $from_str_id ;
		$select_box_model = str_replace($from_str_name, $to_str_name, $select_box_model);
		$select_box_model = str_replace($from_str_id, $to_str_id, $select_box_model);
		$from_string = 'value=' . $show->maillist_index;
		echo $from_string." <<";
		$pos1 = stripos($select_box_model, $from_string);
		//$str0 = str_replace('<','#', $select_box_model);  //to view in test
		//echo $str0;
		if ($pos1  > 0) {
			echo $from_string." <<".'value=' . $show->maillist_index."**";
				
			$to_string = 'value=' . $show->maillist_index .' SELECTED';
			if ($show->maillist_index == $unassigned_index) $assigned_status = true;
			
			// ********
			// SELECTED
			// ********
			$select_box_model = str_replace($from_string, $to_string, $select_box_model);
			//$str0 = str_replace('<','#', $select_box_model);  //to view in test
			//echo $str0;
					
		}
		//echo $select_box_model;
		return $select_box_model;
		}	
	

	public function getAdd() {
		echo 'getAdd';
		$maillist_index = "";
		$tasks_index = "";
		$show_volunteer_link = "";
		$record_type = "";
		$date = "";
		$show_run_mode = "";
		$demo_mode_last_refreshed_date ="";
		$length ="";
		$title ="";
		$artist ="";
		$venue_index = "";
		
		$first_shift_start ="6:30";
		$second_shift_start ="8:30";
		$third_shift_start ="10:00";
		$chair_setup_start ="2:30";
		$chair_setup_end ="4:00";
		return View::make('shows/add')
		
		->with('title' , $title)
		->with('maillist_index' , $maillist_index)
		->with('tasks_index' , $tasks_index)
		->with('show_volunteer_link' , $show_volunteer_link)
		->with('record_type' , $record_type)
		->with('date' , $date)
		->with('show_run_mode' , $show_run_mode)
		->with('demo_mode_last_refreshed_date' , $demo_mode_last_refreshed_date)
		->with('length' , $length)
		->with('title' , $title)
		->with('artist' , $artist)
		->with('first_shift_start' , $first_shift_start)
		->with('second_shift_start' , $second_shift_start)
		->with('third_shift_start' , $third_shift_start)
		->with('chair_setup_start' , $chair_setup_start)
		->with('chair_setup_end' , $chair_setup_end)
		->with('venue_index' , $venue_index);
		echo '47 shows controller';
		
			}
			
				
	public function getEdit() {
		//echo ('getEdit');
		$id = Input::get('id');
		$show = Show::find($id);
		if ($show) {
			$id = $show->id;
			$maillist_index = $show->maillist_index;
			$tasks_index = $show->tasks_index;
			$show_volunteer_link = $show->show_volunteer_link;
			$record_type = $show->record_type ;
			$date = $show->date ;
			$show_run_mode = $show->show_run_mode ;
			$demo_mode_last_refreshed_date =$show->demo_mode_last_refreshed_date; 
			$length =$show->length ;
			$title =$show->title ;
			$artist =$show->artist ;
			$first_shift_start =$show->first_shift_start ;
			$second_shift_start =$show->second_shift_start ;
			$third_shift_start =$show->third_shift_start; 
			$chair_setup_start =$show->chair_setup_start ;
			$chair_setup_end =$show->chair_setup_end ;
			$venue_index =$show->venue_index ;
			}
		else {
			
			$maillist_index = "";
			$tasks_index = "";
			$show_volunteer_link ="";
			$record_type = "";
			$date = "";
			$show_run_mode = "";
			$demo_mode_last_refreshed_date ="";
			$length ="";
			$title ="";
			$artist ="";
			$first_shift_start ="6:30";
			$second_shift_start ="8:30";
			$third_shift_start ="10:00";
			$chair_setup_start ="2:30";
			$chair_setup_end ="4:00";
			$venue_index ="";
		}
		return View::make('shows.edit')
		->with('id', $id)
		->with('title', 'Editing Show')
		->with('title' , $title)
		->with('maillist_index' , $maillist_index)
		->with('tasks_index' , $tasks_index)
		->with('show_volunteer_link' , $show_volunteer_link)
		->with('record_type' , $record_type)
		->with('date' , $date)
		->with('show_run_mode' , $show_run_mode)
		->with('demo_mode_last_refreshed_date' , $demo_mode_last_refreshed_date)
		->with('length' , $length)
		->with('title' , $title)
		->with('artist' , $artist)
		->with('first_shift_start' , $first_shift_start)
		->with('second_shift_start' , $second_shift_start)
		->with('third_shift_start' , $third_shift_start)
		->with('chair_setup_start' , $chair_setup_start)
		->with('chair_setup_end' , $chair_setup_end)
		->with('venue_index' , $venue_index);
				
	}

	public function getIndex1() {
		return View::make('shows.index')
		->with('shows', Show::all());
	}
	

	public function getIndex() {
		//exit('121 getIndex exit');
		//echo '121';
		$original = new DateTime("now");
		$shows = DB::table('shows')
		->where('record_type', '=', 's')
		->where('date','>',$original)
		->orderBy('date', 'desc')
		->get();
		if ($shows){
			//echo '131';
			return View::make('shows.index')
			->with('shows', $shows);
		}else {
			return Redirect::to('admin/shows/add');
		}
	}
	
	public function getNewestShow() {
//	public function getIndex() {
		exit('83 getNewestShow exit');
		$shows = DB::table('shows')
		->where('record_type', '=', 's')
		//->orWhere('name', 'John')
		->get();
		return View::make('shows.index')
		->with('shows', $shows);
	}

	function getEdittingherenow() {
		echo'getEdittingherenow';//var_dump(Input);
		//exit("exit getEdittingherenow");
	}

	function getEdittaskassignments() {
		//echo'getEdittaskassignments';//var_dump(Input);
		$id = Input::get('id');
		$show_volunteer_link = Input::get('show_volunteer_link');
		echo 'show_volunteer_link is:'. $show_volunteer_link ;
	
		$current_task_list =  DB::table('shows')
		->join('tasks', 'shows.tasks_index', '=', 'tasks.id')
		->join('maillist', 'shows.maillist_index', '=', 'maillist.id')
		->where('shows.record_type','=','v')
		->where('shows.show_volunteer_link','=',Input::get('show_volunteer_link'))
		->orderBy('tasks.TaskName', 'asc')
		->get(array(
			'shows.id',
			'TaskName',
			'record_type',
			'shows.maillist_index',
			'shows.show_volunteer_link',				
			'shows.tasks_index',
			'maillist.FirstName',
			'maillist.LastName'
		));
		
		$all_volunteers = $this->get_all_volunteers();
		$unassigned_index = $this->get_unassigned_index();
		$generic_check_box_string = $this->build_generic_select_box_string($all_volunteers);
		$shows = array();
		$rowcount = 0;
		foreach($current_task_list as $show) {
			//echo "id:".Input::get('id')."</br></br>";
			$shows["$show->id"]["select_box"] 		= $this->customize_check_box_string($generic_check_box_string,$show,$rowcount);
			$shows["$show->id"]["maillist_index"] 	= $show->maillist_index;
			if ($show->maillist_index == $unassigned_index){
				$shows["$show->id"]["assigned_status"] = false ;
				}
			else {
				$shows["$show->id"]["assigned_status"] = true;
			}
			$shows["$show->id"] ["fullname"]= $show->LastName ." ". $show->FirstName;
			$rowcount++;
		}
		//exit("exit 264");
		return View::make('shows.t1')
		->with('shows', $shows);
	}

	public function postCreate() {
		$validator = Validator::make(Input::all(), Show::$rules);
		if ($validator->passes()){
			$shows = DB::table('shows')
			->orderBy('date','desc')
			->where('record_type', '=', 's')
			->take(1)
			->get();
			foreach ($shows as $show1){
				$old_show_volunteer_link = $show1->show_volunteer_link;
				//only 1 
			}
			$show = new Show;
			$show->title = Input::get('title');
			$show->artist = Input::get('artist');
			$show->date = Input::get("date");
			$new_date = $show->date;
			$show->show_volunteer_link = $new_date;
			$show->save();
			echo 'first save';
			$shows = DB::table('shows')
				->where('record_type', '=', 'v')
				->where('show_volunteer_link', '=', $old_show_volunteer_link)
				->get();
			foreach ($shows as $old_show){
				//echo $old_show->record_type. $old_show->date;
				$show = new Show;
				$show->show_volunteer_link = $new_date;
				$show->date = $new_date;
				$show->title = $old_show->title;
				$show->artist = $old_show->artist;
				$show->tasks_index = $old_show->tasks_index;
				$show->record_type = $old_show->record_type;
				$show->maillist_index = $old_show->maillist_index;
				$show->show_run_mode = $old_show->show_run_mode;
				$show->demo_mode_last_refreshed_date = $old_show->demo_mode_last_refreshed_date;
				$show->length = $old_show->length;
				$show->first_shift_start = $old_show->first_shift_start;
				$show->second_shift_start = $old_show->second_shift_start;
				$show->third_shift_start = $old_show->third_shift_start;
				$show->chair_setup_start = $old_show->chair_setup_start;
				$show->chair_setup_end = $old_show->chair_setup_end;
				$show->venue_index = $old_show->venue_index;
				$show->save();	
			}
			//echo $old_show->record_type. $old_show->date;exit('at 299');
			return Redirect::to('admin/shows')
			->with('message', 'Show Created');
		}
		 
		return Redirect::to('admin/shows/add')
		->with('message', '67 Something went wrong')
		->withErrors($validator)
		->withInput();
		
	}
	
	public function postDestroy() {
		$show = Show::find(Input::get('id'));
		//var_dump($_REQUEST); echo Input::get('id');
		//echo $show->date; exit('35 postDestroy exit');
		if ($show){
			$show_volunteer_link = $show->show_volunteer_link;
			DB::table('shows')->where('show_volunteer_link', '=', $show_volunteer_link)->delete();
			return Redirect::to('admin/shows/index')
			->with('message', 'Show Deleted');
		}
		return Redirect::to('admin/shows/index')
		->with('message', 'Delete failed, please try again');
		// ->with('message', 'Something went wrong, please try again');
		
	}
	
	
	public function putUpdatevolunteers() {
		echo "putUpdatevolunteers"; //exit('35 putUpdatevolunteers exit');
		//echo (count($_REQUEST['original']));
		$ctr = 0;
		foreach ($_REQUEST['maillist_index'] as $old_index) {
			if ($old_index <> $_REQUEST['select_name'][$ctr]){
				//echo $ctr. ' no match'.$old_index. $_REQUEST['select_name'][$ctr]."</br>";
				DB::table('shows')
				->where('record_type', '=', "v")
				->where('tasks_index', '=', $_REQUEST['tasks_index'][$ctr])
				->where('show_volunteer_link', '=', $_REQUEST['show_volunteer_link'][$ctr])
				->update(array('maillist_index' => $_REQUEST['select_name'][$ctr]));
				}
			else {
				//echo $ctr. ' match</br>';
				}
			$ctr++;
			}
		
		return Redirect::to('admin/shows/index')
		->with('message', 'Volunteer Assignments Updated');
			
		
	}
	
	public function putUpdate() {
		//echo "putUpdate" ; exit("exit putUpdate");
		$validator = Validator::make(Input::all(), Show::$rules);
		if (!$validator->passes()){
			$title = Input::get('title');
			return Redirect::to('admin/shows/edit')
			->with('message', 'Something fucked up again')
			->withErrors($validator)
			->withInput();
			
			
		}
		else {
			$id = Input::get('id');
			Show::where('id', $id)->update(array(
				'maillist_index'=>Input::get("maillist_index"),
				'tasks_index'=>Input::get("tasks_index"),
				'record_type'=>Input::get("record_type"),
				'date'=>Input::get("date"),
				'show_run_mode'=>Input::get("show_run_mode"),
				'demo_mode_last_refreshed_date'=>Input::get("demo_mode_last_refreshed_date"),
				'length'=>Input::get("length"),
				'title'=>Input::get("title"),
				'artist'=>Input::get("artist"),
				'first_shift_start'=>Input::get("first_shift_start"),
				'second_shift_start'=>Input::get("second_shift_start"),
				'third_shift_start'=>Input::get("third_shift_start"),
				'chair_setup_start'=>Input::get("chair_setup_start"),
				'chair_setup_end'=>Input::get("chair_setup_end"),
				'venue_index'=>Input::get("venue_index")
			));
			return Redirect::to('admin/shows')
			->with('message', 'Show Updated');
		}	
	}
			
	public function get_unassigned_index() {
		//echo " get_unassigned_index "; //exit(' exit get_unassigned_index ');
		$current_task_list =  DB::table('maillist')
		->where('maillist.FirstName','like','%no%')
		->where('maillist.LastName','like','%one%')
		->get(array(
			'maillist.id',
			'maillist.FirstName',
			'maillist.LastName'
			));
		foreach($current_task_list as $show) {
			return $show->id;
			echo "**".$show->LastName."**".$show->id."**";
		}
	}
	
}